What happens when you initialize a repository? Why do you need to do it?
	在项目的根目录下输入git init 为此项目创建一个仓库（repository）（会生成一个.git隐藏文件）

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	暂存区中的文件是已被改动，但还没有commit的文件，暂存区可以保证改动被记录，但并不commit未完成的工作

How can you use the staging area to make sure you have one commit per logical
change?
	1.假设工作空间中的两个文件file1和file2做出了某些改动
	2.git status//在Changes not staged for commit条目下查看工作空间的哪些文档有改动（改动还未加入暂存区），可以看到file1和file2
	3.git diff//比较工作空间和暂存区（此时暂存区中是最新的commit版本）的区别，也就是找出刚才在工作空间发生了哪些改动，可以看到file1和file2的具体改动
	4.git add file1//将发生了改动的、想要commit的文件添加到暂存区，假设只想add file1
	**5.git diff//在这里，只看到file2,没有file1（因为此时工作空间和暂存区的file1已经一致了）
	6.git diff --staged//比较暂存区和版本库的区别，以确认即将提交的内容是自己想提交的，在这里只可以看到file1的区别
	7.git commit//调用sublime填写commit注释信息，提交暂存区中内容到版本库，此时版本库出现了新的commit版本，其中只有file1有改动
	**8.git diff --staged//在这里，看不到任何信息
	**9.git diff//在这里，只看到file2
	10. git reset --hard//放弃工作目录或暂存区中的所有更改，也就是未commit的所有更改都被强制还原


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	当需要进行实验性的改动，并保留这些改动成为一个完整的版本，但这个版本应当脱离主线时，使用分支

How do the diagrams help you visualize the branch structure?
	了解git log的特性：非线性（log只显示选中的分支的commit，默认显示当前head所指分支），可达性（所有commit都有指针指向父commit，直到init commit）
	1.git checkout 分支名//将该分支最新commit载入暂存区，head指向该分支名（分支名此时指向的正是该分支最新commit）
	2.git checkout 某commit//将该commit载入暂存区，head指向该commit
		此时修改某些东西并commit//此时head指向新commit(此时产生了一个“野分支”，就是形式上是分支，但因为没有进行git branch命令，所以没有分支名)
		此时一旦checkout到其他分支，则无法再返回到“野分支”（除非记住commit id），也就相当于放弃最一开始的checkout之后的所有工作
		如果想保存“野分支”，应当在这里进行git branch -b 新分支名，相当于创建分支（git branch 新分支名）并跳转到该分支（git checkout 分支名）
	3.git log --graph --oneline//显示commit的同时用图形标记出分支和合并的历史轨迹，每个commit信息只占一行来输出（便于查看）



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
		1.checkout 合并的目标分支//git merge 分支名 总是将选定分支合并进当前checkout的分支，所以我们要先checkout 目标分支
		2.git merge 被合并的分支
		**3.git log//分支合并后，commit按照时间戳排序，这意味着某commit的上一个commit不一定是他的父commit
		4.git show 某commit//使用此命令来对比某commit和他的父commit，而不是使用git diff 某commit 上一个commit
		5.git branch -d 被合并的分支//分支已经被并入目标分支，现在删除旧分支的标签（仅仅是标签，commit不会被影响）

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	自动合并基于“将两个分支的commit与他们的共同父commit进行比较，以确认哪些改动应当在合并时保留”的逻辑，使得一些合并变得省心
	但自动合并并不能解决所有问题，例如公共父commit有代码块B,而两个分支对代码块B进行了不同的改动B1,B2,则自动合并无法判断该保留哪一个，产生了合并冲突
	此时必须手动解决冲突
		1.subl 冲突文件//打开冲突文件
		2.ctrl+f//搜索<<<<<<<<<,可以快速定位到冲突发生处，此处标明了三个版本的代码（两个分支commit，一个公共父commit）
		3.手动解决冲突，删除文件中的特殊标记，调整代码空白、换行等
		**4.git status//可以看到both modified: 冲突文件，说明在两个分支的文件都被更改了
		5.git add 冲突文件,git commit 冲突文件//将解决了冲突的文件提交，此时也就完成了合并（commit信息：merge 某分支 into 某分支）